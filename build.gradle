import org.jetbrains.changelog.Changelog

plugins {
	id 'fabric-loom' version '1.10-SNAPSHOT'
	id 'maven-publish'
	id "me.modmuss50.mod-publish-plugin" version "0.8.3"
	id 'org.jetbrains.changelog' version '2.+'
}

version = project.mod_version + "+" + project.minecraft_version
group = project.maven_group

base {
	archivesName = project.archives_base_name
}

repositories {
	mavenCentral()
	maven { url = 'https://maven.nucleoid.xyz/' }
	maven { url "https://api.modrinth.com/maven" }
}

loom {
	splitEnvironmentSourceSets()

	mods {
		"worldmanager" {
			sourceSet sourceSets.main
			sourceSet sourceSets.client
		}
	}

	accessWidenerPath.set(file("src/main/resources/worldmanager.accesswidener"))
}

dependencies {
	// To change the versions see the gradle.properties file
	minecraft "com.mojang:minecraft:${project.minecraft_version}"
	mappings loom.officialMojangMappings()
	modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"

	modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"

	modImplementation "xyz.nucleoid:fantasy:${project.fantasy_version}"
	include "xyz.nucleoid:fantasy:${project.fantasy_version}"

	modImplementation "me.lucko:fabric-permissions-api:${project.permission_api_version}"
	include "me.lucko:fabric-permissions-api:${project.permission_api_version}"

	include(modImplementation("eu.pb4:sgui:${project.sgui_version}"))

	include(modImplementation("maven.modrinth:message-api:${project.message_api_version}"))
	include(modImplementation("eu.pb4:placeholder-api:${project.placeholder_api_version}"))

	implementation(annotationProcessor("io.github.llamalad7:mixinextras-fabric:${project.mixin_extras_version}"))
	include("io.github.llamalad7:mixinextras-fabric:${project.mixin_extras_version}:slim")
}

publishMods {
	file = remapJar.archiveFile
	type = STABLE
	changelog = fetchChangelog()

	displayName = "WorldManager ${version.get()}"
	modLoaders.add("fabric")
	modLoaders.add("quilt")


	curseforge {
		accessToken = providers.environmentVariable("CURSEFORGE_TOKEN")
		projectId = "1235570"
		minecraftVersions.add(project.curseforge_minecraft_version)
	}
	modrinth {
		accessToken = providers.environmentVariable("MODRINTH_TOKEN")
		projectId = "vbAJDaEx"
		minecraftVersions.add(project.minecraft_version)
	}
	github {
		accessToken = providers.environmentVariable("GITHUB_TOKEN")
		repository = providers.environmentVariable("GITHUB_REPOSITORY").getOrElse("DrexHD/dryrun")
		commitish = providers.environmentVariable("GITHUB_REF_NAME").getOrElse("dryrun")
	}
}

processResources {
	inputs.property "version", project.version

	filesMatching("fabric.mod.json") {
		expand "version": project.version
	}
}

tasks.withType(JavaCompile).configureEach {
	it.options.release = 21
}

java {
	// Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
	// if it is present.
	// If you remove this line, sources will not be generated.
	withSourcesJar()

	sourceCompatibility = JavaVersion.VERSION_21
	targetCompatibility = JavaVersion.VERSION_21
}

jar {
	from("LICENSE") {
		rename { "${it}_${project.base.archivesName.get()}"}
	}
}

// configure the maven publication
publishing {
	publications {
		create("mavenJava", MavenPublication) {
			artifactId = project.archives_base_name
			from components.java
		}
	}

	// See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
	repositories {
		// Add repositories to publish to here.
		// Notice: This block does NOT have the same function as the block in the top level.
		// The repositories here will be used for publishing your artifact, not for
		// retrieving dependencies.
	}
}

private String fetchChangelog() {
	def log = getChangelog.changelog.get()
	if (log.has(project.mod_version)) {
		return log.renderItem(
				log.get(project.mod_version).withHeader(false),
				Changelog.OutputType.MARKDOWN
		)
	} else {
		return ""
	}
}